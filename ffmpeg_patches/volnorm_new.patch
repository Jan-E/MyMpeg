diff --git a/libavfilter/af_volume.c b/libavfilter/af_volume.c
index 4c9b96f..11b3545 100644
--- a/libavfilter/af_volume.c
+++ b/libavfilter/af_volume.c
@@ -55,6 +55,7 @@ static const char *const var_names[] = {
     "startt",              ///< time at start of stream
     "t",                   ///< time in the file of the frame
     "tb",                  ///< timebase
+    "meta",                ///< variable passed by metadata
     "volume",              ///< last set value
     NULL
 };
@@ -67,6 +68,9 @@ static const char *const var_names[] = {
 static const AVOption volume_options[] = {
     { "volume", "set volume adjustment expression",
             OFFSET(volume_expr), AV_OPT_TYPE_STRING, { .str = "1.0" }, .flags = A|F|T },
+    { "metadata", "set the metadata key for loudness normalization", OFFSET(metadata), AV_OPT_TYPE_STRING, { .str = NULL }, .flags = A|F },
+    { "normvol", "set volume normalization level",
+            OFFSET(normvol), AV_OPT_TYPE_DOUBLE, { .dbl = -18.0 }, INT_MIN, INT_MAX, A|F },
     { "precision", "select mathematical precision",
             OFFSET(precision), AV_OPT_TYPE_INT, { .i64 = PRECISION_FLOAT }, PRECISION_FIXED, PRECISION_DOUBLE, A|F, "precision" },
         { "fixed",  "select 8-bit fixed-point",     0, AV_OPT_TYPE_CONST, { .i64 = PRECISION_FIXED  }, INT_MIN, INT_MAX, A|F, "precision" },
@@ -242,6 +246,12 @@ static av_cold void volume_init(VolumeContext *vol)
         ff_volume_init_x86(vol);
 }
 
+static void set_fixed_volume(VolumeContext *vol, double volume)
+{
+    vol->volume_i = (int)(volume * 256 + 0.5);
+    vol->volume   = vol->volume_i / 256.0;
+}
+
 static int set_volume(AVFilterContext *ctx)
 {
     VolumeContext *vol = ctx->priv;
@@ -263,8 +273,7 @@ static int set_volume(AVFilterContext *ctx)
            precision_str[vol->precision]);
 
     if (vol->precision == PRECISION_FIXED) {
-        vol->volume_i = (int)(vol->volume * 256 + 0.5);
-        vol->volume   = vol->volume_i / 256.0;
+        set_fixed_volume(vol, vol->volume);
         av_log(ctx, AV_LOG_VERBOSE, "volume_i:%d/255 ", vol->volume_i);
     }
     av_log(ctx, AV_LOG_VERBOSE, "volume:%f volume_dB:%f\n",
@@ -292,6 +301,7 @@ static int config_output(AVFilterLink *outlink)
     vol->var_values[VAR_STARTPTS] =
     vol->var_values[VAR_STARTT] =
     vol->var_values[VAR_T] =
+    vol->var_values[VAR_META] =
     vol->var_values[VAR_VOLUME] = NAN;
 
     vol->var_values[VAR_NB_CHANNELS] = inlink->ch_layout.nb_channels;
@@ -371,6 +381,34 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *buf)
         av_frame_remove_side_data(buf, AV_FRAME_DATA_REPLAYGAIN);
     }
 
+    vol->var_values[VAR_META] = NAN;
+    if (vol->metadata) {
+        double loudness, new_volume, pow_volume, timestamp, mx;
+        AVDictionaryEntry *e;
+        mx = 40;
+        timestamp = (float)(1.0 * buf->pts / outlink->sample_rate);
+        mx = fmin(mx, timestamp);
+        e = av_dict_get(buf->metadata, vol->metadata, NULL, 0);
+        if (e) {
+            loudness = av_strtod(e->value, NULL);
+            if ((loudness > -69 && loudness < vol->normvol) || loudness > -14) {
+                vol->var_values[VAR_META] = loudness;
+                /* set only if eval is not used and eval_mode == default */
+                if (vol->eval_mode == EVAL_MODE_ONCE) {
+                    new_volume = fmax(-mx, fmin(mx, (vol->normvol - loudness)));
+                    if (loudness > vol->normvol) {
+                        new_volume = fmax(-mx, fmin(mx, (-14 - loudness)));
+                        if (loudness < -14) new_volume = fmax(-mx, fmin(mx, 0));
+                    }
+                    pow_volume = pow(10, new_volume / 20);
+                    av_log(ctx, AV_LOG_VERBOSE, "loudness=%f => %f => volume=%f\n",
+                        loudness, new_volume, pow_volume);
+                    set_fixed_volume(vol, pow_volume);
+                }
+            }
+        }
+    }
+
     if (isnan(vol->var_values[VAR_STARTPTS])) {
         vol->var_values[VAR_STARTPTS] = TS2D(buf->pts);
         vol->var_values[VAR_STARTT  ] = TS2T(buf->pts, inlink->time_base);
diff --git a/libavfilter/af_volume.h b/libavfilter/af_volume.h
index c979029..b8c35dd 100644
--- a/libavfilter/af_volume.h
+++ b/libavfilter/af_volume.h
@@ -54,6 +54,7 @@ enum VolumeVarName {
     VAR_STARTT,
     VAR_T,
     VAR_TB,
+    VAR_META,
     VAR_VOLUME,
     VAR_VARS_NB
 };
@@ -86,6 +87,8 @@ typedef struct VolumeContext {
     void (*scale_samples)(uint8_t *dst, const uint8_t *src, int nb_samples,
                           int volume);
     int samples_align;
+    char *metadata;
+    double normvol;
 } VolumeContext;
 
 void ff_volume_init_x86(VolumeContext *vol);
diff --git a/libavfilter/f_ebur128.c b/libavfilter/f_ebur128.c
index 195c9a8..34228d0 100644
--- a/libavfilter/f_ebur128.c
+++ b/libavfilter/f_ebur128.c
@@ -536,10 +536,7 @@ static av_cold int init(AVFilterContext *ctx)
 
     if (ebur128->loglevel != AV_LOG_INFO &&
         ebur128->loglevel != AV_LOG_VERBOSE) {
-        if (ebur128->do_video || ebur128->metadata)
             ebur128->loglevel = AV_LOG_VERBOSE;
-        else
-            ebur128->loglevel = AV_LOG_INFO;
     }
 
     if (!CONFIG_SWRESAMPLE && (ebur128->peak_mode & PEAK_MODE_TRUE_PEAKS)) {
